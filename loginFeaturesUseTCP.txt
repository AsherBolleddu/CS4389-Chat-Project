#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <time.h>

#define MAXLINE 1024

void UDPServerFunc(int PORT) {
    int sockfd;
    char buffer[MAXLINE];
    struct sockaddr_in servaddr, cliaddr;
    time_t mReceive;

    // Creating socket file descriptor
    if ((sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }

    memset(&servaddr, 0, sizeof(servaddr));
    memset(&cliaddr, 0, sizeof(cliaddr));

    // Filling server information
    servaddr.sin_family = AF_INET; // IPv4
    servaddr.sin_addr.s_addr = INADDR_ANY;
    servaddr.sin_port = htons(PORT);

    // Bind the socket with the server address
    if (bind(sockfd, (const struct sockaddr *)&servaddr, sizeof(servaddr)) < 0) {
        perror("bind failed");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    socklen_t len;
    ssize_t n;

    // Continuous receiving loop
    while (1) {
        len = sizeof(cliaddr);
        n = recvfrom(sockfd, buffer, sizeof(buffer) - 1, 0, (struct sockaddr *)&cliaddr, &len);
        if (n < 0) {
            perror("recvfrom error");
            continue; // Handle the error and continue
        }

        time(&mReceive);
        buffer[n] = '\0'; // Null-terminate the received message

        // Open the echo.log file and log the received message
        FILE *fp = fopen("echo.log", "a");
        if (fp == NULL) {
            perror("Could not open echo.log");
            continue; // Handle the error and continue
        }

        fprintf(fp, "%s\t\"%s\" was received from %s:%d\n",
                ctime(&mReceive),
                buffer,
                inet_ntoa(cliaddr.sin_addr),
                ntohs(cliaddr.sin_port));
        fclose(fp);
    }

    close(sockfd); // Close the socket when done (although it won't reach here in this example)
}
